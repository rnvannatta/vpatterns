(use vpatterns vunit)

(test-suite
  (begin-tests matches?
    (equal? (matches? 'a 'b) '((a . b)))
    (equal? (matches? 1 1) '())
    (equal? (matches? 1 2) #f)
    (equal? (matches? "" 2) #f)
    (equal? (matches? '() '()) '())
    (equal? (matches? "foo" "foo") '())
    (equal? (matches? '(1 . 2) '(1 . 2)) '())
    (equal? (matches? '(a . b) '(1 . 2)) '((a . 1) (b . 2)))
    (equal? (matches? '(a . b) "foo") #f)
    (equal? (matches? '_ '(1 2 3)) '())
    (equal? (matches? '(_ f) '(a (b))) '((f b)))
    (equal? (matches? '((a b) (c)) '(a (b))) #f)
    (equal? (matches? '((a b) (1)) '((1 2) (1))) '((a . 1) (b . 2))))
  (begin-tests match-ellipses
    (equal? (matches? '(x ...) '(1 2 3)) '((x 1 2 3)))
    (equal? (matches? '(x ...) 1) #f)
    (equal? (matches? '(x ...) '()) '((x)))
    (equal? (matches? '(x ... y) '(1 2 3)) '((x 1 2) (y . 3)))
    (equal? (matches? '(x ... y z) '(1 2 3)) '((x 1) (y . 2) (z . 3)))
    (equal? (matches? '(x ... y z w) '(1 2 3)) '((x) (y . 1) (z . 2) (w . 3)))
    (equal? (matches? '(x ... y z w a) '(1 2 3)) #f)
    (equal? (matches? '((x) ...) '((1) (2))) '((x 1 2)))
    (equal? (matches? '((x) ...) '((1) 2)) #f)
    (equal? (matches? '((x) ... y) '((1) 2)) '((x 1) (y . 2)))
    (equal? (matches? '((x y) ...) '((1 a) (2 b))) '((x 1 2) (y a b)))
    (equal? (matches? '((x y ...) ...) '((1 a b) (2 c) (3))) '((x 1 2 3) (y (a b) (c) ())))
    (equal? (matches? '((1 y) ...) '((1 a) (1 b))) '((y a b)))
    (equal? (matches? '((_ y) ...) '((1 a) (2 b))) '((y a b)))
    (equal? (matches? '((1 2) ...) '((1 2) (1 2))) '())
    (equal? (matches? '((_) ...) '((1) (2))) '()))
  (begin-tests match-quotation
    (equal? (matches? ''f 'f) '())
    (equal? (matches? ''_ '_) '())
    (equal? (matches? '(x '...) '(... ...)) '((x . ...)))
    (equal? (matches? ''_ 'a) #f)
    (equal? (matches? '_ 'a) '())
  )
  (begin-tests match-case
    (equal? (match 1 (x x)) 1)
    (equal? (match 3 (else 1 2)) 2)
    (equal? (match '(1 2) ((x) x) (else 'fail)) 'fail)
    (equal? (match '(1 2) ((x) x) ((a b) (+ a b)) (else 'fail)) 3)
    (equal? (match '(x) ((x) 'a) (x 'b) (else 'fail)) 'a)
    (equal? (match '(x) (x 'b) ((x) 'a) (else 'fail)) 'b)
    (equal? (match '(2 4) ((a b) (define x (+ a b)) x)) 6)
    (equal? (match '(1 2 3) ((x y z) => +)) 6)
    (equal? (match '(1 2 3) ((x y ...) => (lambda (a b) (map (cut + <> a) b)))) '(3 4))
    (equal? (match '() ((a ...) a)) '())
    (equal? (match '(1 2 3) ((x y ...) y)) '(2 3))
    (equal? (match '(1 2 3) ((x y ...) x)) 1)
    (equal? (match '(1 2 3 4) ((x ... y) (apply + x))) 6)
    (equal? (match '(1 2 3 4) ((x ... y) y)) 4)
    (equal? (match '((1 a) (2 b)) (((x y) ...) y)) '(a b))
    (equal? (match '((1 a) (1 b)) (((1 y) ...) y)) '(a b))
    (equal? (match '(1 2) ((_ x) x)) 2)
    (equal? (match 'y ('x 'x) ('y 'y) (f 'fail)) 'y)
    (equal? (match 'y (_ 'true) (else 'false)) 'true)
    (equal? (let ((x 0)) (match (begin (set! x (+ x 1)) x) ((a) x) (b x))) 1)
    (equal? (match '(1 2 3 4) ((1 a ... b) a) (else #f)) '(2 3))
    (equal? (match '((1) (2) (3) (4) 5) (((a) ...) #t) (else #f)) #f)
    (equal? (match '(() (1 2) (c) (x y z) (x)) ((c (a ... b) ...) a) (else #f)) '((1) () (x y) ()))
    (equal? (match '(() (1 2) (c) (x y z) (x)) ((c (a ... b) ...) b) (else #f)) '(2 c z x))
    (equal? (match '(() (1 2) (c) (x y z) (x)) ((c (a ... b) ...) c) (else #f)) '())
    (equal? (match #\c ((expr ... x) #f) (else #t)) #t)
  )
)
